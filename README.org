* Lavu Scheme
Lavu stands for lavender, good plant.

** Project Goals
Lavu (Lavender) Scheme is an educational R5RS Scheme implementation focused on:
- Maximum comprehensibility through tiny, well-defined passes
- Excellent REPL experience with advanced inspection features
  - we reedline maxing up in this bitch
- Support for type inference and analysis
- Ability to query procedures and values for their types (similar to Idris's :t feature)
- Support the whole R5RS standard
- Ideally, it should also be trivial to bind Rust stuff into the Scheme

** Implementation Philosophy
- Take tiny steps with well-defined scope
- Prioritize inspectability over performance
  - No optimizations at all
- Build strong foundations for type analysis
- Create a learning tool rather than a production compiler

** Architecture
- AST-based interpreter with multiple small transformation passes
- Symbol table with rich metadata
- Type inference via flow typing and constraints

** Compiler Passes
Outstandinng issues:
**** TODO Reduce the massive amount of code duplication that we have, but not really (since the code is same, but types are different)

*** Identification Passes
1. (x) Identify symbol literals (Quote + Identifier)
2. (x) Identify core special forms (lambda, if, set!, begin, quote)
3. (x) Identify let (regular form)
4. (x) Identify named let (separate from regular let)
5. (x) Identify letrec and let*
6. (x) Identify cond and case
7. (x) Identify do
8. (x) Identify and & or
9. (x) Identify delay
10. (x) Identify internal defines

*** Rewrite Passes
11. Rewrite case into cond
12. Rewrite cond into if
13. Rewrite do into letrec
14. Rewrite named let into letrec + lambda
15. Rewrite letrec into let + set!
16. Rewrite let* into nested lets
17. Rewrite regular let into lambda
18. Rewrite delay into (make-promise <lambda>)
19. Rewrite quasiquote
20. Rewrite and & or into if
21. Handle internal defines

** Type System
- (Planned) Flow typing with constraints
- (Planned) Type inference for procedure parameters and return values
- (Planned) Type queries in the REPL
- (Planned) Support for union types (e.g., (number? | string?))
- (Planned) Special handling for set! to maintain type safety

** REPL Features
- (Planned) :t command to show inferred types for expressions and procedures
- (Done) Syntax highlighting and enhanced UI via reedline
- (Planned) Rich error messages with source locations
- (Planned) Inspection of evaluation steps

** R5RS Compliance
- (Planned) Full support for R5RS special and derived forms
- (Planned) Implementation of macros via define-syntax and syntax-rules
- (Planned) Standard library with proper type annotations
